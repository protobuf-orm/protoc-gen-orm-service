package app

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"path/filepath"
	"text/template"

	"github.com/protobuf-orm/protobuf-orm/graph"
	"google.golang.org/protobuf/compiler/protogen"
)

type App struct {
	namer *template.Template
}

func New(opts ...Option) (*App, error) {
	a := &App{}
	for _, opt := range opts {
		opt(a)
	}
	if a.namer == nil {
		a.namer = template.Must(template.New("namer").Parse("{{ .Name }}_svc.g.proto"))
	}

	return a, nil
}

func (a *App) Run(ctx context.Context, p *protogen.Plugin, g *graph.Graph) error {
	// req := &pluginpb.CodeGeneratorRequest{}
	// req.

	// Single file is generated for each source file.
	// Key is `src.GeneratedFilenamePrefix`.
	gfs := map[string]*protogen.GeneratedFile{}

	ok := true
	handle_err := func(err error) {
		ok = false
	}

	w := newWork()
	for _, f := range p.Files {
		for _, m := range f.Messages {
			entity, ok := g.Entities[m.Desc.FullName()]
			if !ok {
				continue
			}

			gf, ok := gfs[f.GeneratedFilenamePrefix]
			if !ok {
				gf_, path, err := a.newGeneratedFile(p, f)
				if err != nil {
					handle_err(err)
					continue
				}

				w.paths[string(entity.FullName())] = path

				gf = gf_
				gfs[f.GeneratedFilenamePrefix] = gf
			}
			if err := w.run(ctx, gf, entity); err != nil {
				handle_err(err)
				continue
			}
		}
	}
	if !ok {
		return errors.New("some tasks are failed")
	}

	return nil
}

func (a *App) newGeneratedFile(p *protogen.Plugin, f *protogen.File) (*protogen.GeneratedFile, string, error) {
	dir, name := filepath.Split(f.Desc.Path())

	var b bytes.Buffer
	if err := a.namer.Execute(&b, struct{ Name string }{Name: name}); err != nil {
		return nil, "", fmt.Errorf("name %s: %w", f.GeneratedFilenamePrefix, err)
	}
	name = b.String()
	path := filepath.Join(dir, name)

	gf := p.NewGeneratedFile(path, f.GoImportPath)
	gf.P(`// Code generated by protoc-gen-orm-service. DO NOT EDIT.`)
	gf.P(`// source: `, f.Desc.Path()+".proto")
	gf.P("")

	return gf, path, nil
}
